package SimpleSchema.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("SimpleSchema.structure.ComplexType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "SimpleSchema.structure.Type").children(new String[]{"elements"}, new boolean[]{true}).alias("complexType", "").create();
      case 1:
        return new ConceptDescriptorBuilder("SimpleSchema.structure.Element").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("type").alias("element", "").create();
      case 2:
        return new ConceptDescriptorBuilder("SimpleSchema.structure.Schema").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"rootElement", "types"}, new boolean[]{false, true}).alias("schema", "").create();
      case 3:
        return new ConceptDescriptorBuilder("SimpleSchema.structure.Type").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"SimpleSchema.structure.ComplexType", "SimpleSchema.structure.Element", "SimpleSchema.structure.Schema", "SimpleSchema.structure.Type"};
}
